The solutions has two loops:
1. To take care of 0 to n
2. To count the #1s in each digit

Imp to note:
1. Allocate the memory even for vector, to avoid realocation
Reallocation: Everytime push_back() is called, since the capacity is full new memory block is allocated which is twice the current capacity
Can lead to memory overflow and increases the execution time since each push_back() means copying the vector again
2. Seperate variable to count the number of 1s, so that two loops are mutually exclusive


class Solution {
public:
    vector<int> countBits(int n) {
        vector<int> result;
        result.reserve(n+1);
        for(int i = 0; i <= n; i++)
        {
          
            int count = 0, num;
            num = i;

            while(num > 0)
            {
                if((num&1) == 1)
                    count++;

                num = num>>1; 
            }

            result.push_back(count);
        }
    
        return result;
    }
};

Space: O(n)
Time: O(nlogn)
